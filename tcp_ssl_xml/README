This folder is about TCP communication using OpenSSL and Mini-XML.

-------------------------------------------------------------------------
If the certificate and private key are out of date, please use the following command to generate new ones. 
	openssl genrsa -out privkey.pem 2048
	openssl req -new -x509 -key privkey.pem -out cacert.pem -days 1095

At the same time, of course, you should have installed OpenSSL and Mini-XML for PC and ARM to execute and run these codes.

------------------------------------------------------------------------
Then, to compile them, please open the terminal, and type 
	gcc -o tcp_ssl_xml_client tcp_ssl_xml_client.c -lssl -lcrypto -lmxml -lpthread
	gcc -o tcp_ssl_xml_server tcp_ssl_xml_server.c -lssl -lcrypto -lmxml -lpthread
to generate binary files for PC.

When the target is ARM architecture, for instance Beaglebone Black, change gcc to arm-linux-gnueabi-gcc, or the cross-compiler name on your computer, to generate binary files. Maybe you should also point out the path of Mini-XML library for ARM, when cross-compiling, if you forgot to set prefix argument. Here is /home/dhlinux/mxml-2.7ARM. 

So it should be like arm-linux-gnueabi-gcc -o tcp_ssl_xml_server tcp_ssl_xml_server.c -L/home/dhlinux/mxml-2.7ARM -lssl -lcrypto -lmxml -lpthread

Type ./tcp_ssl_xml_server 8080 5 cacert.pem privkey.pem
	./tcp_ssl_xml_client 127.0.0.1 8080 25 30
to run them on PC, and change 127.0.0.1 to the ip address of server when testing on BBBs. Here, 5 is the connection maximum of the server. 25 and 30 are the Low and High limits of temperature correspondingly.

At last, File "data" is only for test on PC.

PS: Of course, you should also cross-compile all the libraries, such as openssl, mxml for BBB, and scp them to BBBs, for instance, libmxml.a, libmxml.so libmxml.so.1 libmxml.so.1.5 for mxml. You can use ./configure --host=arm-linux-guneabi to cross-compile them, and remember the libs of mxml after cross-compiling are inside of you source folder(the same folder with "configure"). 

------------------------------------------------------------------------
Updates:

The programs for final test are: tcp_ssl_xml_client_with_GPIO.c tcp_ssl_xml_server_with_GPIO.c 

The data collection of temperature from sensors and the control of lamps and fan are assembled into the former version to generate them. Cross compile them in the above way. 

The former version(without GPIO) can work when no peripheral circuits connected to Beaglebones, because it uses the pre-set data and only leaves the control interfaces there -- does not implement control parts.
